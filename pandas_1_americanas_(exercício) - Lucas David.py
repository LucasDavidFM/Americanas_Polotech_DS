# -*- coding: utf-8 -*-
"""pandas_americanas (exercício)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XRnWkO-YJE3C5MbESR8K8ruZkyHwX1pS

# Aula 04 - Pandas (Parte I)

O **[Pandas](https://pandas.pydata.org/)** é uma das bibliotecas mais usadas em data science.

Esta biblioteca, construída a partir do Numpy, possibilita a estruturação e manipulação de dados de maneira simples e eficiente.

Como os dados são a matéria prima de todo projeto de Data Science, manipulá-los é fundamental! Por isso, utilizaremos o Pandas em quase todas as aulas daqui pra frente!

[Guia do pandas](https://pandas.pydata.org/docs/user_guide/index.html#user-guide)

Nesta primeira aula, avaliaremos:
- o que são Séries e DataFrames;
- alguns dos principais métodos para operar com Séries;
- leitura e gravação de conjuntos de dados com pandas.

**Importando a biblioteca**
"""

import pandas as pd

"""## Series

O objeto fundamental do Pandas são as **Series**, uma classe do pandas.

As Series são as **colunas das tabelas** (que veremos mais a frente), e por baixo dos panos, os dados ficam armazenados como **numpy arrays**!

A diferença é que a série possui um **índice associado**, permitindo o acesso aos conteúdos dessa estrutura por ele, como um dicionário.

Além disso, as séries têm métodos específicos além dos que vimos pra arrays, o que será super útil!

Podemos criar uma série **a partir de uma lista**, usando a função do pandas `pd.Series()`:

Vamos avaliar algumas particularidades das pd.Series a seguir.
"""

# lista
lista = [4, 6, 3, 7, 25]
lista

# array numpy
import numpy as np
arr = np.array(lista)
arr

"""[pd.Series()](https://pandas.pydata.org/docs/reference/api/pandas.Series.html)"""

# Série a partir de uma lista
# os índices são automaticamente definidos
serie = pd.Series(lista)

serie

"""Os números à esquerda são os **índices** da série, e, aqueles à direita, são seus **valores**. Podemos também acessá-los separadamente."""

# Acessando os valores
serie.values

# Acessando índices
serie.index

[i for i in range(0,5,1)]

lista = []
for i in range(0,5,1):
    lista.append(i)
lista

"""**Indexação da série**

A indexação de uma série com pandas é muito similar à maneira que fazemos com listas e numpy arrays.
"""

serie

serie[2]

# Outra forma de indexar usando o .values
serie.values[2]

"""Podemos fazer uma analogia da série em pandas com os dicionários do Python:"""

# exemplo de um dicionário
dic = {0: 10, 1:20}

dic

# Acessamos o dicionário pelas chaves
dic[0]

# Também podemos acessar os valores, apenas, assim como para as séries
dic.values()

dic.keys()

"""**Slicing de séries**

Também é feito da maneira como estamos acostumados a trabalhar com listas e numpy arrays.
"""

# slicing
serie[2:]

"""**Índices**

Apesar de termos visto a opção padrão de criação de índices, acima, sequencial, podemos defini-los da maneira que quisermos.
"""

lista = [4, 6, 3, 7, 25]

serie = pd.Series(lista)
serie

# vamos usar outros índices quaisquer
indices = ['a', 'b', 'c', 'd', 'e']

serie = pd.Series(data = lista,
         index = indices,
         name = "coluna1")
serie

"""Podemos acessar os valores indexando tanto com o número da posição na série, ou com o próprio índice."""

serie[2]

serie["c"]

# também conseguimos fazer slicing com os índices
serie["c":]

serie[['a', 'c', 'e']]

"""Também conseguimos construir séries a partir de **dicionários**. Neste caso, as **chaves** se tornam os índices da série."""

dic = {'a': 50, 'b': 40}
dic

# Série a partir de dicionário
pd.Series(dic)

"""**Operações com séries**

Assim como vimos para os numpy arrays, operações com séries são realizadas elemento a elemento.
"""

serie

# No caso de arrays
arr

arr + 5

# Operações aritméticas básicas funcionam elemento a elemento
serie + 5

serie*5

serie/5

"""O mesmo vale para **operações lógicas**."""

# apenas elementos divisíveis por 2
serie % 2 == 0

serie > 10

"""Também conseguimos operar entre séries."""

lista1 = [4, 6, 3, 7, 25]
lista2 = [34, 42, 2, 1, -40]

s1 = pd.Series(lista1)
s2 = pd.Series(lista2)

s1

s2

s3 = s1 + s2
s3

# Usando a condição lógica como indexação
s3 = s2[s2 % 2 == 0]
s3

# Conseguimos "resetar o index"
s3 = s2[s2 % 2 == 0].reset_index(drop=True)
s3

"""NaN = *not a number*; dado vazio"""

np.random.seed(1)
a1 = np.random.randint(0,100,5)
a2 = np.random.randint(20,60,7)
print(a1,a2)

s1 = pd.Series(a1)
s2 = pd.Series(a2)

s1

s2

a1 + a2

s1 + s2

# opção para preencher valores nulos: fill_value
# preenche com 0, porque 0 é o elemento neutro da soma
s1.add(s2, fill_value = 0) # outra maneira de somar

s1*s2

# elemento neutro é 1
s1.multiply(s2, fill_value = 1)

"""E com dados de formatos diferentes?"""

s_texto = pd.Series(["a", "b", "c"])
s_numero = pd.Series([1,2,3])

s_texto

s_numero

# Com strings
print("a"*1)
print("b"*2)
print("c"*3)

# Mesmo efeito para as séries
s_texto * s_numero

# Strings
"a" + 1

# Séries
s_texto + s_numero

"""**Filtrando séries**

Filtros de séries seguem a mesma lógica de numpy arrays.
"""

s1

# filtro da série: quais são os valores da série que satisfazem uma dada condição?
s1[s1 > 15]

s1[(s1 > 15) & (s1 % 2 != 0)]

type(s1)

"""**Outros métodos úteis para séries**"""

np.random.seed(1)

notas = pd.Series(np.random.randint(3,12,30))
notas

# .apply()
notas.apply(lambda x: "par" if x % 2 == 0 else "ímpar")

notas_check = notas.apply(lambda x: True if x >=0 and x <= 10 else False)
notas_check

lista_notas_check = []

for nota in notas:
    if nota >= 0 and nota <= 10:
        lista_notas_check.append(True)
    else:
        lista_notas_check.append(False)
pd.Series(lista_notas_check)

# max(), min() etc
notas.min()

notas.shape

notas.size

# Ordenação dos valores
notas.sort_values(ascending = False)

# valores únicos
notas.unique()

# número de ocorrências
notas.value_counts()

# frequência relativa de cada valor
notas.value_counts()/notas.size

# Outra forma de fazer a frequência relativa
notas.value_counts(normalize = True)

# soma cumulativa
notas.cumsum()

notas

# Estatísticas básicas todas juntas
notas.describe()

# Podemos aplicar após filtrar também
notas[notas >= 5].describe()

"""# Voltamos às 20h45

## DataFrame

Agora que conhecemos as séries, vamos partir pro objeto do Pandas que mais utilizaremos: o **DataFrame**

Como veremos a seguir, o DataFrame é uma estrutura que se assemalha a uma **tabela**.

Estruturalmente, o DataFrame nada mais é que um **conjunto de Series**, uma para cada coluna (e, claro, com mesmo índice, que irão indexar as linhas).

Veremos depois como **ler um dataframe a partir de um arquivo** (que é provavelmente a forma mais comum).

Há muitas formas de construir um DataFrame do zero. Todas elas fazem uso da função **pd.DataFrame()**, como veremos a seguir.

Se quisermos especificar os índices de linha, o nome das colunas, e os dados, podemos passá-los separadamente:

Selecionando colunas específicas

As colunas do dataframes são séries. Assim, tudo que vimos para as séries, se estende individualmente para cada coluna!
"""



"""## Lendo e escrevendo conjuntos de dados com pandas

### Lendo dados de um arquivo

A forma mais comum de se construir um dataframe é a partir da **leitura de um arquivo**

Em geral, queremos ler arquivos já estruturados como base de dados, em formatos como .csv, .xls, .xlsx, .ods, .txt, .json, etc.

O pandas é capaz de ler todos esses formatos, com funções específicas!

#### CSV

https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html

Vamos criar um dataframe usando pandas com os dados do arquivo `alunos.csv`
"""





"""Vamos criar um dataframe usando pandas com os dados do arquivo `alunos2.csv`"""



"""Ou seja: é preciso estarmos sempre atentos ao separador dos dados!

#### XLS ou XLSX

https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_excel.html

Vamos criar um dataframe usando pandas com os dados do arquivo `sample.xlsx`
"""



"""##### Leitura com seleção de planilha

Vamos criar um dataframe usando pandas com os dados da planilha `p2` da pasta de trabalho `sample.xlsx`
"""



"""##### Leitura com seleção de cabeçalho

Vamos criar um dataframe usando pandas com os dados da planilha `p3` da pasta de trabalho `sample.xlsx`. Porém vamos eliminar a primeira linha de cabeçalho
"""



"""##### Leitura com definção de nomes de colunas

Vamos criar um dataframe usando pandas com os dados da planilha `p3` da pasta de trabalho `sample.xlsx`. Porém vamos eliminar a primeira linha de cabeçalho e definir os nomes das colunas.
"""



"""##### Leitura da internet

Vamos criar um dataframe usando pandas com os dados de uma planilha disponivel na página de dados abertos do INPI.

https://www.gov.br/inpi/pt-br/acesso-a-informacao/dados-abertos/conjuntos-corporativos-de-dados-abertos/pedidos-de-patentes-pendentes-de-decisao-final/pedidos-de-patentes-pendentes-de-decisao-final-cgrec.xlsx
"""



"""#### JSON

https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_json.html

Vamos criar um dataframe usando pandas com os dados do arquivo json `selic.json`
"""



"""Vamos criar um dataframe usando pandas com os dados da selic em formato json vindo de uma API do Banco Central

https://api.bcb.gov.br/dados/serie/bcdata.sgs.4390/dados?formato=json
"""



"""#### TXT de tamanho fixo

https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_fwf.html

Vamos criar um dataframe usando pandas com os dados em formato TXT (Com colunas de tamanho fixo) disponíveis por FTP pelo Banco Central.

https://www.bcb.gov.br/pom/spb/Down/ftp/prod/ASPB0004.TXT
"""



"""_________
### Escrevendo dados de um arquivo
"""



"""#### CSV

Separado por virgula
"""



"""Separado por ponto e virgula"""



"""#### XLSX"""







"""___
### Vamos praticar?

Leia o arquivo `aluno3.csv`, apenas as colunas RA, Prova_1, Prova_2, Prova_3, Prova_4 realise a médias das notas da prova e salve em um arquivo excel (xlsx) as colunas RA e Média.
"""



from google.colab import drive
drive.mount('/content/drive')

df_alunos = pd.read_csv("/content/alunos3.csv", sep = ";")
df_alunos

# Conferir os tipos das variaveis, 
# Será necessário converter Prova_1, Prova_2, Prova_3, Prova_4
# Também será necessário trocar as vírgulas por "." 
df_alunos.dtypes

# Trocar ',' por '.'
df_alunos = df_alunos.replace(to_replace=',', value='.', regex=True)
df_alunos

# Utilizando dicionário para converter apenas as colunas Prova
dicionario_converter = {'Prova_1': float,'Prova_2': float ,'Prova_3': float ,'Prova_4': float}
 
df_alunos = df_alunos.astype(dicionario_converter)
print(df_alunos.dtypes)

#Criando uma nova coluna Média
df_alunos['Média'] = df_alunos[['Prova_1','Prova_2','Prova_3','Prova_4']].mean(axis=1)
df_alunos

# Criação de um novo dataframe para obter o resultado desejado
df_RA_Media = df_alunos.copy()
df_RA_Media = df_RA_Media.drop(['Nome', 'Frequencia','Prova_1','Prova_2','Prova_3','Prova_4'], axis=1)
df_RA_Media

# Criação do arquivo xlsx
df_RA_Media.to_excel("exercício_pandas.xlsx")
